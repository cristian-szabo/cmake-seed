docker-static-analisys: &executor-cppcheck
  working_directory: /tmp
  docker:
    - image: cristianszabo/cppcheck:1.72

docker-clang-tidy: &executor-clang-tidy
  working_directory: /tmp
  docker:
    - image: cristianszabo/clang-tidy:1.72    

docker-linux: &executor-linux
  working_directory: /tmp
  docker:
    - image: cristianszabo/gnu-linux:7.1
    
docker-arm-linux: &executor-arm-linux
  working_directory: /tmp
  docker:
    - image: cristianszabo/gnu-arm-linux:7.1

docker-arm-android: &executor-arm-android
  working_directory: /tmp
  docker:
    - image: cristianszabo/gnu-arm-android:4.7
    
docker-windows: &executor-windows
  working_directory: /tmp
  docker:
    - image: cristianszabo/gnu-mingw:7.1

build-extern: &build-extern-base
  steps:
    - checkout
    - restore_cache:
        key: v1-build-extern-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
    - run:
        name: Static Analysis C++ Code
        command: |
          cmake -G "Unix Makefiles" -B./Build -H./
          cmake --build ./Build --config $CONFIGURATION
    - save_cache:
        key: v1-build-extern-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
        paths:
          - Build  
    - persist_to_workspace:
          root: Build/Install
          paths:
            - echo-output
    
jobs:
  cppcheck:
    <<: *executor-cppcheck
    steps:
      - checkout
      - run:
          name: Static Analysis C++ Code
          command: |
            cppcheck --enable=information --template=gcc --enable=all Lib/ App/ Test/
  clang-tidy:
    <<: *executor-clang-tidy
    steps:
      - checkout
      - restore_cache:
          key: v1-cland-tidy-{{ .Branch }}
      - run:
          name: Static Analysis C++ Code
          command: |
            cmake -G "Unix Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_APP=OFF -DBUILD_TEST=OFF -B./Build-$OS-$ARCH -H./
            cmake --build Build-$OS-$ARCH --config $CONFIGURATION
            export PROJECT_FILES=$(find Lib -type f -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h")
            clang-tidy -p Build-$OS-$ARCH -checks=hicpp-*,modernize-*,cppcoreguidelines-*, $PROJECT_FILES
      - save_cache:
          key: v1-cland-tidy-{{ .Branch }}
          paths:
            - Build-$OS-$ARCH
  build-extern-linux-32:
    <<: *executor-linux
    <<: *build-extern-base
    environment:
      OS: Linux
      ARCH: 32
  build-extern-linux-64:
    <<: *executor-linux
    <<: *build-extern-base
    environment:
      OS: Linux
      ARCH: 64     
          
workflows:
  version: 2
  pre-build:
    jobs:
      - cppcheck
      - clang-tidy
      - build-extern-linux-32
      - build-extern-linux-64
#      - extern-arm-linux-32
#      - extern-arm-linux-64
#      - extern-arm-android-32
#      - extern-arm-android-64
#      - extern-windows-32
#      - extern-windows-64
  build:
    jobs:
#      - build-project-linux-32
#      - build-project-linux-64
  post-build:
    jobs:
#      - build-coverage
  test:
    jobs:
#      - test-linux
#      - test-coverage
  deploy:
    jobs:
#      - github
#      - github-coverage