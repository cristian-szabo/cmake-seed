DockerCppCheck: &ExecutorCppCheck
  working_directory: /tmp
  docker:
    - image: cristianszabo/cppcheck:1.81

DockerCLangTidy: &ExecutorCLangTidy
  working_directory: /tmp
  docker:
    - image: cristianszabo/clang-tidy:3.8

DockerLinux: &ExecutorLinux
  working_directory: /tmp
  docker:
    - image: cristianszabo/gnu-linux:7.1

BuildExternScript: &BuildExternScript
  steps:
    - checkout
    - restore_cache:
        key: v1-build-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
    - run:
        name: Build Dependencies
        command: |
          cmake -G "Unix Makefiles" -DCMAKE_CXX_FLAGS="-m$ARCH" -B./Build -H./
          cmake --build Build --config $CONFIGURATION
    - save_cache:
        key: v1-build-{{ .Branch }}-{{ .Environment.CIRCLE_JOB }}
        paths:
          - Build  
    - persist_to_workspace:
          root: Build/Install
          paths:
            - Extern
    
version: 2
jobs:
  CppCheck:
    <<: *ExecutorCppCheck
    steps:
      - checkout
      - run:
          name: Static Analysis C++ Code
          command: |
            CppCheck --enable=information --template=gcc --enable=all Lib/ App/ Test/
  CLangTidy:
    <<: *ExecutorCLangTidy
    steps:
      - checkout
      - restore_cache:
          key: v1-cland-tidy-{{ .Branch }}
      - run:
          name: Build Project (Library Only)
          command: |
            cmake -G "Unix Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_APP=OFF -DBUILD_TEST=OFF -B./Build-$OS-$ARCH -H./
            cmake --build Build-$OS-$ARCH --config $CONFIGURATION
      - run:
          name: Static Analysis C++ Code
          command: |
            export PROJECT_FILES=$(find Lib -type f -name "*.cpp" -o -name "*.hpp" -o -name "*.c" -o -name "*.h")
            CLangTidy -p Build-$OS-$ARCH -checks=hicpp-*,modernize-*,cppcoreguidelines-*, $PROJECT_FILES
      - save_cache:
          key: v1-cland-tidy-{{ .Branch }}
          paths:
            - Build-$OS-$ARCH
  BuildExternLinux32:
    <<: *ExecutorLinux
    environment:
      OS: Linux
      ARCH: 32
    steps:
      <<: *BuildExternScript
  BuildExternLinux64:
    <<: *ExecutorLinux   
    environment:
      OS: Linux
      ARCH: 64
    steps:
      <<: *BuildExternScript
  BuildProjectLinux32:
    <<: *ExecutorLinux
    steps:
      - run:
        command: |
          echo "test"          
  BuildProjectLinux64:
    <<: *ExecutorLinux
    steps:
      - run:
        command: |
          echo "test"          
  TestProjectLinux:
    <<: *ExecutorLinux
    steps:
      - run:
        command: |
          echo "test"   
  DeployGithub:
    <<: *ExecutorLinux
    steps:
      - run:
        command: |
          echo "test"
  BuildProjectCoverage:
    <<: *ExecutorLinux
    steps:
      - run:
        command: |
          echo "test"
  GenerateCoverageReport:
    <<: *ExecutorLinux
    steps:
      - run:
        command: |
          echo "test"

workflows:
  version: 2
  BuildCheck:
    jobs:
      - CppCheck
      - CLangTidy
      - BuildExternLinux64:
          requires:
            - CppCheck
            - CLangTidy
      - BuildProjectCoverage:
          requires:
            - BuildExternLinux64
      - GenerateCoverageReport:
          requires:
            - BuildProjectCoverage
      - DeployGithub:
          requires:
            - GenerateCoverageReport  
  BuildLinux:
    jobs:
      - BuildExternLinux32
      - BuildExternLinux64
      - BuildProjectLinux32:
          requires:
            - BuildExternLinux32
      - BuildProjectLinux64:
          requires:
            - BuildExternLinux64
      - TestProjectLinux:
          requires:
            - BuildProjectLinux32
            - BuildProjectLinux64
      - DeployGithub:
          requires:
            - TestProjectLinux